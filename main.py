from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)
import os

# –¢–≤–æ–π Telegram ID –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
ADMIN_ID = 1572671116  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π ID

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –≤ —Ñ–∞–π–ª
def save_user(chat_id):
    if not os.path.exists("users.txt"):
        with open("users.txt", "w") as f:
            f.write(str(chat_id) + "\n")
    else:
        with open("users.txt", "r+") as f:
            ids = f.read().splitlines()
            if str(chat_id) not in ids:
                f.write(str(chat_id) + "\n")

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    save_user(chat_id)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è.\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –Ω–∏—à—É üëá")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∏—à–∏
async def handle_niche(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    user_data[chat_id] = {"niche": update.message.text}
    save_user(chat_id)

    text = (
        "üîπ *–¢–∞—Ä–∏—Ñ –õ–∞–π—Ç* ‚Äî –£–ø–∞–∫—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É, —É–¥–∞–ª–∏–º –Ω–µ–≥–∞—Ç–∏–≤ –∏ –¥–∞–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n\n"
        "üîπ *–¢–∞—Ä–∏—Ñ –°—Ç–∞–Ω–¥–∞—Ä—Ç* ‚Äî –í—Å—ë, —á—Ç–æ –≤ –õ–∞–π—Ç + –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –≤ —Ç–æ–ø-3 –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö –∏ –Ø–Ω–¥–µ–∫—Å.–ü–æ–∏—Å–∫–µ + —Ä–∞–±–æ—Ç–∞ —Å 2GIS.\n\n"
        "üîπ *–¢–∞—Ä–∏—Ñ –ü—Ä–µ–º–∏—É–º* ‚Äî –í—Å—ë, —á—Ç–æ –≤ –°—Ç–∞–Ω–¥–∞—Ä—Ç + SEO –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–ø-1 —Å—Ä–µ–¥–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:"
    )

    keyboard = [
        [InlineKeyboardButton("–õ–∞–π—Ç", callback_data="–õ–∞–π—Ç")],
        [InlineKeyboardButton("–°—Ç–∞–Ω–¥–∞—Ä—Ç", callback_data="–°—Ç–∞–Ω–¥–∞—Ä—Ç")],
        [InlineKeyboardButton("–ü—Ä–µ–º–∏—É–º", callback_data="–ü—Ä–µ–º–∏—É–º")],
    ]

    await update.message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

# –í—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞
async def handle_tariff_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    chat_id = query.message.chat_id
    tariff = query.data
    niche = user_data.get(chat_id, {}).get("niche", "–Ω–µ —É–∫–∞–∑–∞–Ω–∞")

    prices = {
        "–õ–∞–π—Ç": "13 990‚ÇΩ",
        "–°—Ç–∞–Ω–¥–∞—Ä—Ç": "19 990‚ÇΩ",
        "–ü—Ä–µ–º–∏—É–º": "26 990‚ÇΩ"
    }

    price = prices.get(tariff, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞")

    result = (
        f"üîç –í–∞—à–∞ –Ω–∏—à–∞ ‚Äî *{niche}*\n"
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ ‚Äî *{tariff}*\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: *{price}*\n\n"
        "üéÅ *–°–∫–∏–¥–∫–∞ 20%* –Ω–∞ –≤—Ç–æ—Ä–æ–π –º–µ—Å—è—Ü –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è!"
    )

    keyboard = [
        [InlineKeyboardButton("üì≤ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/Goust_141OTG")]
    ]

    await query.message.reply_text(
        result,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Ç–µ–∫—Å—Ç–æ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async def send_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if context.args:
        message = " ".join(context.args)
        sent = 0

        if not os.path.exists("users.txt"):
            await update.message.reply_text("–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ.")
            return

        with open("users.txt", "r") as f:
            ids = f.read().splitlines()

        for user_id in ids:
            try:
                await context.bot.send_message(chat_id=int(user_id), text=message)
                sent += 1
            except:
                pass

        await update.message.reply_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    else:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: /sendall —Ç–µ–∫—Å—Ç")

# –ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å —Ñ–æ—Ç–æ + –∫–Ω–æ–ø–∫–æ–π "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
async def send_all_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ó–¥–µ—Å—å –ø–æ—Å—Ç–∞–≤—å —Å–≤–æ—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É
    photo_url = "https://cdn-icons-png.flaticon.com/512/732/732200.png"

    caption = "üî• –ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ! –ó–∞–∫–∞–∂–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö —Å–µ–π—á–∞—Å!"

    keyboard = [
        [InlineKeyboardButton("üì≤ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/Goust_141OTG")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if not os.path.exists("users.txt"):
        await update.message.reply_text("–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ.")
        return

    with open("users.txt", "r") as f:
        ids = f.read().splitlines()

    sent = 0
    for user_id in ids:
        try:
            await context.bot.send_photo(
                chat_id=int(user_id),
                photo=photo_url,
                caption=caption,
                reply_markup=reply_markup
            )
            sent += 1
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {user_id}: {e}")

    await update.message.reply_text(f"‚úÖ –§–æ—Ç–æ-—Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    app = ApplicationBuilder().token("7486297110:AAGJJfbEzgUcHmETvGjCZp-aRd-4T0V5qaI").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_niche))
    app.add_handler(CallbackQueryHandler(handle_tariff_choice))
    app.add_handler(CommandHandler("sendall", send_all))
    app.add_handler(CommandHandler("sendallphoto", send_all_photo))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! t.me/YandexCartBot")
    app.run_polling()

if __name__ == "__main__":
    main()
